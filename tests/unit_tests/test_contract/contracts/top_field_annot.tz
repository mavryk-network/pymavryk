storage (pair (pair (nat %id) (nat %limit))
              (pair (list %previousWinners address) (map %ticketToAddress nat address)));
parameter (nat %buyTicket);
code { CAST (pair nat (pair (pair nat nat) (pair (list address) (map nat address)))) ;
       UNPAIR ;
       AMOUNT ;
       PUSH mumav 1000000 ;
       DUP 3 ;
       MUL ;
       COMPARE ;
       EQ ;
       IF
         {}
         { PUSH string "WrongCondition: sp.mul(params, sp.tez(1)) == sp.amount" ;
           FAILWITH } ;
       PUSH mumav 0 ;
       SWAP ;
       DUP ;
       DUG 2 ;
       DIG 3 ;
       DUP ;
       CAR ;
       CAR ;
       SWAP ;
       DUP ;
       DUG 5 ;
       CAR ;
       CDR ;
       SUB ;
       ISNAT ;
       IF_NONE { PUSH int 18 ; FAILWITH } {} ;
       DUP 4 ;
       COMPARE ;
       GT ;
       IF
         { DROP 2 ;
           SWAP ;
           DUP ;
           CAR ;
           CAR ;
           SWAP ;
           DUP ;
           DUG 3 ;
           CAR ;
           CDR ;
           SUB ;
           ISNAT ;
           IF_NONE { PUSH int 18 ; FAILWITH } {} ;
           PUSH mumav 1000000 ;
           DIG 3 ;
           DUP ;
           CAR ;
           CAR ;
           SWAP ;
           DUP ;
           DUG 5 ;
           CAR ;
           CDR ;
           SUB ;
           ISNAT ;
           IF_NONE { PUSH int 18 ; FAILWITH } {} ;
           DUP 4 ;
           SUB ;
           ISNAT ;
           IF_NONE { PUSH int 21 ; FAILWITH } {} ;
           MUL ;
           SWAP }
         {} ;
       DUP ;
       PUSH nat 1 ;
       ADD ;
       PUSH nat 1 ;
       DUP ;
       DUP 3 ;
       COMPARE ;
       GT ;
       LOOP { DUP 6 ;
              DUP ;
              GET 4 ;
              SENDER ;
              SOME ;
              DIG 8 ;
              CAR ;
              CAR ;
              UPDATE ;
              UPDATE 4 ;
              UNPAIR ;
              UNPAIR ;
              PUSH nat 1 ;
              ADD ;
              PAIR ;
              PAIR ;
              DUG 5 ;
              PUSH nat 1 ;
              ADD ;
              DUP ;
              DUP 3 ;
              COMPARE ;
              GT } ;
       DROP 2 ;
       PUSH mumav 0 ;
       DUP 3 ;
       COMPARE ;
       GT ;
       IF
         { NIL operation ;
           SENDER ;
           CONTRACT unit ;
           IF_NONE { PUSH int 28 ; FAILWITH } {} ;
           DUP 4 ;
           UNIT ;
           TRANSFER_TOKENS ;
           CONS }
         { NIL operation } ;
       PUSH nat 5 ;
       DUP 6 ;
       CAR ;
       CAR ;
       COMPARE ;
       EQ ;
       IF
         { DUP 5 ;
           GET 4 ;
           PUSH int 5 ;
           PUSH timestamp "1970-01-01T00:00:00Z" ;
           PUSH timestamp "2021-07-23T11:40:26Z" ;
           SUB ;
           EDIV ;
           IF_NONE { PUSH int 36 ; FAILWITH } { CDR } ;
           GET ;
           IF_NONE { PUSH int 38 ; FAILWITH } {} ;
           CONTRACT unit ;
           IF_NONE { PUSH int 38 ; FAILWITH } {} ;
           PUSH mumav 5000000 ;
           UNIT ;
           TRANSFER_TOKENS ;
           CONS ;
           DIG 4 ;
           DUP ;
           DUP ;
           GET 3 ;
           SWAP ;
           GET 4 ;
           PUSH int 5 ;
           PUSH timestamp "1970-01-01T00:00:00Z" ;
           PUSH timestamp "2021-07-23T11:40:26Z" ;
           SUB ;
           EDIV ;
           IF_NONE { PUSH int 36 ; FAILWITH } { CDR } ;
           GET ;
           IF_NONE { PUSH int 39 ; FAILWITH } {} ;
           CONS ;
           UPDATE 3 ;
           UNPAIR ;
           CDR ;
           PUSH nat 0 ;
           PAIR ;
           PAIR ;
           DUP ;
           DUG 5 ;
           CAR ;
           CDR ;
           PUSH nat 0 ;
           DUP ;
           DUP 3 ;
           COMPARE ;
           GT ;
           LOOP { DIG 6 ;
                  DUP ;
                  GET 4 ;
                  NONE address ;
                  DUP 4 ;
                  UPDATE ;
                  UPDATE 4 ;
                  DUG 6 ;
                  PUSH nat 1 ;
                  ADD ;
                  DUP ;
                  DUP 3 ;
                  COMPARE ;
                  GT } ;
           DROP 2 ;
           SWAP ;
           DROP ;
           SWAP ;
           DROP ;
           SWAP ;
           DROP }
         { SWAP ; DROP ; SWAP ; DROP ; SWAP ; DROP } ;
       NIL operation ;
       SWAP ;
       ITER { CONS } ;
       PAIR }